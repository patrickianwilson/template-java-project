buildscript {
    repositories {
        maven {
            url "https://maven.pkg.jetbrains.space/inquest/p/buildtools/gradle-plugins-internal"
            credentials {
                username = spaceUsername
                password = spacePassword
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "com.inquestdevops:WarblerBuildGradlePlugin:1.0.+"
        classpath "com.inquestdevops:ProjectTemplatesGradlePlugin:1.0.+"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
        classpath "io.freefair.gradle:lombok-plugin:6.4.1"
    }
}

project.version = 'dev.1'
project.group = "com.github.patrickianwilson"

if (System.getenv("BUILD_NUMBER") != null) {
    def majorVersion = "1.0" //eventually override with a lookup
    def buildStream = "0"
    project.version = "${majorVersion}.${buildStream}.${System.getenv("BUILD_NUMBER")}"
}

ext {
    moduleName = "%%{{ModuleName}}%%" //change me!!
    heapRequirement = "200M"
}

project.configurations {
    wasm
}

apply plugin: "project.cardinal-service"

mainClassName="com.sample.cardinal.Runner"
applicationDefaultJvmArgs = ["-Xms${project.ext.heapRequirement}", "-Xmx${project.ext.heapRequirement}"]

task configureZip {
    finalizedBy distZip
    doLast {
        distZip.archiveName = "${moduleName}.zip"
        startScripts.applicationName = "${moduleName}"
    }
}

release.dependsOn "configureZip"


repositories {
    maven {
        url "https://maven.pkg.jetbrains.space/inquest/p/abstractdatareporitories/adr-repository"
        credentials {
            username = spaceUsername
            password = spacePassword
        }
    }
    maven {
        url "https://maven.pkg.jetbrains.space/inquest/p/buildtools/build-tools"
        credentials {
            username = spaceUsername
            password = spacePassword
        }
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "com.github.patrickianwilson:AbstractDataRepositories-DatasourceGCPDatastore:1.0.0.+"
    implementation "com.github.patrickianwilson:ServicePatterns:1.0.0.+"
    implementation ("com.github.patrickianwilson:RabbitAgentJaxRs:1.0.0.+")

    implementation "com.github.patrickianwilson:RabbitLoginJAXRSResources:1.0.0.+"
//    implementation project(":modules:RabbitLoginJAXRSResources")

    implementation "com.github.patrickianwilson:MercuryServiceJavaAPI:1.0.0.+"
    implementation group: "com.github.patrickianwilson", name:"CardinalConfigUtils", version: "1.0.0.+"
    implementation group: "com.github.patrickianwilson", name:"CardinalServiceBase", version: "1.0.0.+"
    implementation group: "com.github.patrickianwilson", name:"CardinalUI", version: "1.0.0.+"
    implementation group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version: '2.0.6'
    implementation group: 'io.swagger.core.v3', name: 'swagger-jaxrs2-servlet-initializer', version: '2.0.6'
    implementation "com.beust:jcommander:1.72"
}

project.task([type: Copy], "copyWASMDeps", {
    dependsOn project.configurations.wasm
    from {
        project.configurations.wasm.each { project.logger.info("Found Dependency: $it")}
        project.configurations.wasm.collect { project.zipTree(it) }
    }
    into "${project.projectDir}/build/assets"
    outputs.upToDateWhen({false})
})

project.tasks.pkg.dependsOn("copyWASMDeps")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "${project.ext.moduleName}"
            from components.java
        }
    }
    repositories {
        maven {
            name = 'mavenInternal'
            url "https://maven.pkg.jetbrains.space/inquest/p/buildtools/build-tools"
            credentials {
                username = spaceUsername
                password = spacePassword
            }
        }
    }
}

//remove all these jax rs api dependencies
project.configurations {
    all*.exclude group: "javax.ws.rs", module: "javax.ws.rs-api"
    all*.exclude group: "javax.ws.rs", module: "javax.ws.rs-api"
}

tasks.release.dependsOn "validate"
if (project.version != "dev.1") {
    project.tasks.release.dependsOn("publishAllPublicationsToMavenInternalRepository")
}
